import java.util.*;

public class Solution {
    public int beautifulSubsets(int[] nums, int k) {
        int totCount = 1;
        Map<Integer, Map<Integer, Integer>> freqMap = new HashMap<>();

        // Calculate frequencies based on remainder
        for (int num : nums) {
            int remainder = num % k;
            freqMap.putIfAbsent(remainder, new HashMap<>());
            freqMap.get(remainder).put(num, freqMap.get(remainder).getOrDefault(num, 0) + 1);
        }

        // Iterate through each remainder group
        for (Map<Integer, Integer> fr : freqMap.values()) {
            int n = fr.size();
            int currCount = 1;
            int next1 = 1;
            int next2 = 0;
            List<Map.Entry<Integer, Integer>> subsets = new ArrayList<>(fr.entrySet());
            subsets.sort(Map.Entry.comparingByKey());

            // Calculate counts for each subset starting from the second last
            for (int i = n - 1; i >= 0; i--) {
                int skip = next1;

                int take = (1 << subsets.get(i).getValue()) - 1;

                if (i + 1 < n && subsets.get(i + 1).getKey() - subsets.get(i).getKey() == k) {
                    take *= next2;
                } else {
                    take *= next1;
                }

                currCount = skip + take;
                next2 = next1;
                next1 = currCount;
            }

            totCount *= currCount;
        }

        return totCount - 1;
    }
}

Level - Medium (2597)
LOGIC: Explanation 
Example - Input: nums = [2,4,6], k = 2
Output: 4
The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].
It can be proved that there are only 4 beautiful subsets in the array [2,4,6].
------------------------------------------------------------------------------------
Initialize Total Count: Starts with a total count of 1.
Create Frequency Map: Creates a frequency map (freqMap) where keys are remainders of nums modulo k, and values are maps of numbers and their frequencies.
Populate Frequency Map: Iterates through nums and populates freqMap with counts of each number based on their remainder when divided by k.
Iterate Remainder Groups: Loops through each remainder group in freqMap.
Initialize Counts: For each group, initializes currCount to 1, and next1 and next2 to 1 and 0 respectively.
Sort and Process Subsets: Converts the subset of numbers for the current remainder group into a list, sorts it, and processes it from last to first.
Calculate Skip and Take Counts:
skip is set to next1.
take is calculated based on the frequency of the current number.
Adjusts take if the next number in the sorted list has a key difference of k.
Update Counts: Updates currCount, next2, and next1 with the new counts calculated.
Multiply Total Count: Multiplies totCount with currCount for each remainder group.
Return Result: Returns the final count of beautiful subsets by subtracting 1 to exclude the empty subset.
