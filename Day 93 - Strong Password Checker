class Solution {
    public int strongPasswordChecker(String password) {
        int[] ok = new int[]{1, 1, 1};
        char[] A = password.toCharArray();
        for (char ch : A){ // check the 3 conditions first.
            ok[0] &= Character.isLowerCase(ch)? 0 : 1;
            ok[1] &= Character.isUpperCase(ch)? 0 : 1;
            ok[2] &= Character.isDigit(ch)? 0 : 1;
        }
        int ans = 0, len = password.length(), cond = ok[0]+ok[1]+ok[2]; // cond -> how many cond not met yet.
        var minheap = new PriorityQueue<Integer>(Comparator.comparingInt(o -> o%3)); // sort by o%3
        for (int i = 0, cnt = 1; i < len; i++, cnt++){ // put consecutive chars with count >= 3 into the minheap
            if (i == len-1 || A[i] != A[i+1]){
                if (cnt >= 3){
                    minheap.offer(cnt);
                }
                cnt = 0;
            }
        }
        while(len > 20 && !minheap.isEmpty()){ // if len > 20, we try to delete from the chars groups.
            int cur = minheap.poll();
            if (--cur >= 3){
                minheap.offer(cur);
            }
            --len;
            ++ans;
        }
        while(!minheap.isEmpty()){ // if there are still 3 or more chars groups, we need to replace or insert
            int cur = minheap.poll();
            cond -= cur/3;
            ans += cur/3;
            if (len < 6){ // insert only for len < 6; otherwise, replace.
                len++;    // I do ++ here as cur can only be 3,4,5.
            }
        }
        while(len > 20){ // if len is still > 20, we need to delete.
            ans++;
            len--;
        }
        while(len < 6){ // if len < 6, we need to insert and per insertion will satisify 1 cond
            cond--;
            ans++;
            len++;
        }
        return ans + (cond < 0? 0 : cond); // remember to take the max of (cond, 0).
    }
}

LOGIC: Explanation 
Example - Input: password = "a"
Output: 5

Input: password = "1337C0d3"
Output: 0
-------------------------------------------------------------------------------------------------------------------
The code defines a class Solution with a method strongPasswordChecker that takes a string password as input and returns an integer representing the minimum number of operations required to make the password strong.

It initializes an array ok to keep track of whether the password meets certain conditions (contains lowercase letters, uppercase letters, and digits).

It converts the password into a character array A for easier manipulation.

It loops through each character in the password and updates the ok array based on whether the character is lowercase, uppercase, or a digit.

It calculates the number of conditions that are not met (cond) and initializes a priority queue (minheap) to store the count of consecutive characters that are repeated more than three times.

It loops through the password to identify consecutive characters and adds their counts to the priority queue if they exceed three repetitions.

It then starts processing the password length:

If the length is greater than 20, it tries to delete characters from the repeated character groups stored in the priority queue until the length is reduced to 20.
If there are still repeated character groups in the priority queue, it processes them by either replacing or inserting characters based on the password length.
If the length is less than 6, it inserts characters to satisfy at least one condition (lowercase, uppercase, or digit).

Finally, it calculates the total operations required (ans) by adding the operations for deletion, insertion, or replacement based on the password conditions and returns the result.
