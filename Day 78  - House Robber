class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return nums[0];
        }

        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
        }

        return dp[n - 1];
    }
}

LOGIC: Explanation 
Example - Input: nums = [1,2,3,1]
Output: 4
Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Method Signature:
The method is named rob.
It takes an array of integers nums as input.
It returns an integer, representing the maximum amount that can be robbed.

Base Cases:
If the length of the input array nums is 0, the function returns 0 (no houses to rob).
If the length is 1, the function returns the value of the only house available.

Initialization:
An array dp of integers is created with the same length as the input array nums. This array is used to store the maximum amount that can be robbed up to each house.

Dynamic Programming Loop:
The loop iterates from the 2nd house (index 1) to the last house (index n-1).
For each house i, the maximum amount that can be robbed is calculated using the formula: dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]).
dp[i - 1]: Represents the maximum amount robbed excluding the current house.
dp[i - 2] + nums[i]: Represents the maximum amount robbed including the current house.

Result:
The final result is the maximum amount that can be robbed from all the houses, which is stored in dp[n - 1], where n is the length of the input array.
