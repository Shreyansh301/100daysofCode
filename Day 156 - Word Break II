class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        Set<String> set = new HashSet<>(wordDict);
        return helper(s,0,set);
    }
    private List<String> helper(String str, int s, Set<String> set){
        List<String> valid = new ArrayList<>();
        if(s == str.length()){
            valid.add("");
        }
        for(int e = s+1; e <= str.length(); e++){
            String pre = str.substring(s, e);
            if(set.contains(pre)){
                List<String> suff = helper(str, e, set);
                for(String suf : suff){
                    valid.add(pre + (suf.equals("") ? "" : " ")+ suf);
                }
            }
        }
        return valid;
    }
}

Level - Hard (140)
LOGIC: Explanation 
Example - Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
----------------------------------------------------------------------------------------
Class Definition:
class Solution defines the class.

Main Method (wordBreak):
Takes String s and List<String> wordDict as parameters.
Converts wordDict to a Set<String> for faster lookups.
Calls helper method with the initial index 0.

Helper Method (helper):
Parameters: String str, int s, Set<String> set.
Initializes a list valid to store valid sentences.

Base Case:
If s equals the length of str, adds an empty string to valid.

Loop:
Iterates from s+1 to the length of str.
Extracts substring pre from s to e.
Checks if pre is in the set.

Recursive Call:
If pre is valid, calls helper with e as the new start index.
Combines pre with valid suffixes returned by the recursive call.
Adds combined strings to valid.

Combining Words:
Adds a space between pre and suf only if suf is not empty.

Return:
Returns the list valid containing all valid sentence combinations.
