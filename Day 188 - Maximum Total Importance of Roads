class Solution {
    public long maximumImportance(int n, int[][] roads) {
    long[] cnt = new long[50001];
    long res = 0;
    for (int[] r : roads) {
        ++cnt[r[0]];
        ++cnt[r[1]];
    }
    Arrays.sort(cnt, 0, n);
    for (int i = 0; i < n; ++i)
        res += cnt[i] * (i + 1);
    return res;
}
}

Level - Medium (2285)
LOGIC: Explanation 
Example - Input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
Output: 43
The figure above shows the country and the assigned values of [2,4,5,3,1].
- The road (0,1) has an importance of 2 + 4 = 6.
- The road (1,2) has an importance of 4 + 5 = 9.
- The road (2,3) has an importance of 5 + 3 = 8.
- The road (0,2) has an importance of 2 + 5 = 7.
- The road (1,3) has an importance of 4 + 3 = 7.
- The road (2,4) has an importance of 5 + 1 = 6.
The total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.
It can be shown that we cannot obtain a greater total importance than 43.
------------------------------------------------------------------------------------------
Method Definition:
public long maximumImportance(int n, int[][] roads): A method that calculates the maximum importance of a city's road network.

Initialization:
long[] cnt = new long[50001];: Initializes an array cnt to store the count of roads connected to each city.
long res = 0;: Initializes a variable res to store the result.

Count Road Connections:
for (int[] r : roads) { ++cnt[r[0]]; ++cnt[r[1]]; }: Iterates through each road and increments the count for both cities connected by the road.

Sort Connection Counts:
Arrays.sort(cnt, 0, n);: Sorts the connection counts of the first n cities in ascending order.

Calculate Maximum Importance:
for (int i = 0; i < n; ++i) res += cnt[i] * (i + 1);: Iterates through the sorted counts, multiplying each count by its respective importance value (i + 1) and adds the result to res.

Return Result:
return res;: Returns the calculated maximum importance.
