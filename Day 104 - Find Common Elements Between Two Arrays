class Solution {
    public int[] findIntersectionValues(int[] nums1, int[] nums2) {
        final boolean[] l1 = new boolean[101];
        final boolean[] l2 = new boolean[101];

        for(final int num : nums1)
            l1[num] = true;

        for(final int num : nums2)
            l2[num] = true;

        int first = 0, second = 0;

        for(final int num : nums1)
            if(l2[num])
                ++first;

        for(final int num : nums2)
            if(l1[num])
                ++second;

        return new int[] { first, second };
    }
}

Level - Easy (2956)
LOGIC: Explanation 
Example - Input: nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]
Output: [3,4]
We calculate the values as follows:
- The elements at indices 1, 2, and 3 in nums1 occur at least once in nums2. So the first value is 3.
- The elements at indices 0, 1, 3, and 4 in nums2 occur at least once in nums1. So the second value is 4.
------------------------------------------------------------------------------------------------------------------------------
Code defines a class named Solution.
Within the class, there's a public method findIntersectionValues that takes two integer arrays nums1 and nums2 as input and returns an integer array.
Inside the method, two boolean arrays l1 and l2 are created with a size of 101. These arrays are used to keep track of which numbers are present in nums1 and nums2.
The first loop iterates through nums1 and sets the corresponding index in l1 to true for each number in nums1.
The second loop iterates through nums2 and sets the corresponding index in l2 to true for each number in nums2.
Two integer variables first and second are initialized to 0. These variables will be used to count the intersection values between nums1 and nums2.
The third loop iterates through nums1 again and checks if the number exists in nums2 by checking the corresponding index in l2. If it does, the first variable is incremented.
The fourth loop iterates through nums2 and checks if the number exists in nums1 by checking the corresponding index in l1. If it does, the second variable is incremented.
Finally, the method returns an integer array containing the values of first and second, which represent the count of intersection values between nums1 and nums2.
