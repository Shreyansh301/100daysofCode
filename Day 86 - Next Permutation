class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 2;

        // Find the first decreasing element from the right
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        if (i >= 0) {
            // Find the smallest element greater than nums[i] to its right
            int j = n - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j); // Swap nums[i] and nums[j]
        }

        reverse(nums, i + 1); // Reverse the suffix starting from i+1
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private void reverse(int[] nums, int start) {
        int left = start;
        int right = nums.length - 1;
        while (left < right) {
            swap(nums, left, right);
            left++;
            right--;
        }
    }
}

LOGIC: Explanation 
Example - Input: nums = [1,2,3]
Output: [1,3,2]
-----------------------------------------------------------------------------------------------------
nextPermutation method:
Takes an integer array nums as input.
Finds the next lexicographically greater permutation of the elements in nums.

Variable Initialization:
n is initialized to the length of the input array nums.
i is initialized to n - 2, which is the second-last index of nums.

Finding the First Decreasing Element:
The code uses a while loop to find the index i such that nums[i] is less than the element immediately to its right (nums[i + 1]). This step identifies the "breaking point" where the permutation needs to change.

Checking for a Breaking Point:
If i is greater than or equal to 0, it means a breaking point is found. Otherwise, it means the array is in descending order and there is no next permutation possible.

Finding the Next Greater Element:
Within the if condition, the code uses another while loop to find the smallest element greater than nums[i] to its right. This element is denoted by the index j.

Swapping Elements:
The code swaps nums[i] with nums[j], effectively creating the next lexicographically greater permutation.

Reversing the Suffix:
After swapping, the code calls the reverse method to reverse the suffix of nums starting from i + 1. This step ensures that the suffix is in ascending order, resulting in the next permutation.

swap method:
Takes an integer array nums and two indices i and j.
Swaps the elements at indices i and j in the array nums.

reverse method:
Takes an integer array nums and a starting index start.
Reverses the elements in nums starting from index start until the end of the array.
This code efficiently computes the next permutation of an array following the lexicographic order by identifying the breaking point, swapping elements, and reversing the suffix.
