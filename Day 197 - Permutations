class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        int[] taken = new int[nums.length];
        permutations(0, nums, taken, res, list);
        return res;
    }
    public void permutations(int index, int[] arr, int[] taken,List<List<Integer>> res, List<Integer> list){
        if(list.size() == arr.length){
            res.add(new ArrayList<>(list));
            return;
        }
        //if a value is not taken I can take it
        for(int i = 0;i < arr.length;i++){
            if(taken[i] == 0){
                //take it
                taken[i] = 1;
                list.add(arr[i]);
                permutations(i + 1, arr, taken, res, list);
                list.remove(list.size() - 1);
                taken[i] = 0;
            }
        }
    }
}
/* 
Level - Medium (46)
LOGIC: Explanation 
Example - Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
----------------------------------------------------------------------
Class Definition:
The class Solution contains the main method for generating permutations.

permute Method:
This method takes an array nums as input and returns a list of all possible permutations of the elements in nums.
It initializes the result list res to store all permutations.
It initializes a list list to temporarily store the current permutation being formed.
It initializes an array taken to keep track of whether an element in nums has been used in the current permutation.
It calls the helper method permutations to generate the permutations.

permutations Method:
This is a recursive method that generates all permutations by exploring all possible choices for each position in the permutation.
Base Case: If the size of list equals the length of arr, it means a complete permutation has been formed. This permutation is added to res.

Recursive Case:
The method iterates through each element in arr.
If the element at index i has not been used (taken[i] == 0), it is included in the current permutation (list).
The element is marked as used (taken[i] = 1).
The method recursively calls itself to continue building the permutation with the next index.
After returning from the recursive call, the element is removed from list, and it is marked as not used (taken[i] = 0) to allow for other permutations to be formed.


*/