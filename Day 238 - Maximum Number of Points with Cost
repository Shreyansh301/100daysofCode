class Solution {
    public long maxPoints(int[][] points) {
        int m = points.length;
        int n = points[0].length;
        long[] dp = new long[n];

        // Initialize dp with the first row
        for (int j = 0; j < n; ++j) {
            dp[j] = points[0][j];
        }

        // Traverse through each row
        for (int i = 1; i < m; ++i) {
            long[] leftMax = new long[n];
            long[] rightMax = new long[n];
            long[] newDp = new long[n];

            // Calculate left max
            leftMax[0] = dp[0];
            for (int j = 1; j < n; ++j) {
                leftMax[j] = Math.max(leftMax[j - 1], dp[j] + j);
            }

            // Calculate right max
            rightMax[n - 1] = dp[n - 1] - (n - 1);
            for (int j = n - 2; j >= 0; --j) {
                rightMax[j] = Math.max(rightMax[j + 1], dp[j] - j);
            }

            // Calculate new DP for the current row
            for (int j = 0; j < n; ++j) {
                newDp[j] = Math.max(leftMax[j] - j, rightMax[j] + j) + points[i][j];
            }

            dp = newDp;
        }

        long maxPoints = dp[0];
        for (int j = 1; j < n; ++j) {
            maxPoints = Math.max(maxPoints, dp[j]);
        }
        return maxPoints;
    }
}
/*
Level - Medium (1937)
LOGIC: Explanation 
Example - Input: points = [[1,2,3],[1,5,1],[3,1,1]]
Output: 9
The blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).
You add 3 + 5 + 3 = 11 to your score.
However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.
Your final score is 11 - 2 = 9.
--------------------------------------------------------------------------------
Function Purpose: 
The maxPoints method calculates the maximum points one can collect from a grid of points, moving row by row, with the constraint that moving from column j to column k in the next row incurs a penalty of |j - k|.

Variables:
m and n store the number of rows and columns in the grid.
dp[] is used to store the maximum points obtainable up to the current row for each column.

Initialization:
The dp[] array is initialized with the values of the first row since thatâ€™s where the journey starts.
Main Loop (for (int i = 1; i < m; ++i)):

Left Max Calculation:
leftMax[] is computed to keep track of the maximum possible value for each column if moving from any previous column to the left.
Right Max Calculation:
rightMax[] is computed to track the maximum possible value for each column if moving from any previous column to the right.
New DP Array:
newDp[] is computed using the leftMax[] and rightMax[] arrays to determine the maximum points that can be obtained in each column of the current row.
This accounts for both the left and right moves, and the corresponding penalties.

Updating DP:
After computing newDp[], the dp[] array is updated for the next iteration.

Final Calculation:
The maximum value in the dp[] array after processing all rows is returned as the result, representing the maximum points that can be collected.
*/