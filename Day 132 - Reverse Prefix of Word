class Solution {
    public String reversePrefix(String word, char ch) {
        int firstOccurence = word.indexOf(ch);
        if (firstOccurence == -1) {
            return word;
        }
        StringBuilder sb = new StringBuilder(word.substring(0, firstOccurence + 1)).reverse();
        if (firstOccurence < word.length()) {
            sb.append(word.substring(firstOccurence + 1));
        }
        return sb.toString();
    }
}

Level - Easy (2000)
LOGIC: Explanation 
Example - Input: word = "abcdefd", ch = "d"
Output: "dcbaefd"
The first occurrence of "d" is at index 3. 
Reverse the part of word from 0 to 3 (inclusive), the resulting string is "dcbaefd".
------------------------------------------------------------------------------------------------------
public String reversePrefix(String word, char ch) {: This declares a function named reversePrefix that takes two inputs: a string called word and a character called ch.

int firstOccurence = word.indexOf(ch);: Finds the index of the first occurrence of the character ch in the string word.

if (firstOccurence == -1) { return word; }: Checks if the character ch is not found in the string. If not found, it returns the original word without any changes.

StringBuilder sb = new StringBuilder(word.substring(0, firstOccurence + 1)).reverse();: Creates a StringBuilder object sb containing the substring of word from the beginning up to the first occurrence of ch, and then reverses this substring.

if (firstOccurence < word.length()) { sb.append(word.substring(firstOccurence + 1)); }: Checks if there are characters after the first occurrence of ch in word. 
If yes, it appends the remaining part of word (after the first occurrence of ch) to the StringBuilder sb.

return sb.toString();: Converts the StringBuilder sb back to a string and returns it. This string is the original word with its prefix (characters before the first occurrence of ch) reversed if ch is found in word.
