class Solution {
    public int minOperations(int[] nums, int k) {
        int finalXor = 0;
        // XOR of all integers in the array.
        for (int n : nums) {
            finalXor = finalXor ^ n;
        }
        
        int count = 0;
        // Keep iterating until any of k or finalXor becomes zero.
        while (k > 0 || finalXor > 0) {
            // k % 2 returns the rightmost bit in k,
            // finalXor % 2 returns the rightmost bit in finalXor.
            // Increment counter, if the bits don't match.
            if ((k % 2) != (finalXor % 2)) {
                count++;
            }
            
            // Remove the last bit from both integers.
            k /= 2;
            finalXor /= 2;
        }
        
        return count;
    }
}

Level - Medium (2997)
LOGIC: Explanation
Example - Input: nums = [2,1,3,4], k = 1
Output: 2
We can do the following operations:
- Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].
- Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].
The XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.
It can be shown that we cannot make the XOR equal to k in less than 2 operations.
-------------------------------------------------------------------------------------------------------------------------
Input Parameters: The function minOperations takes two inputs: an array of integers nums and an integer k.

XOR Operation: It starts by calculating the XOR (exclusive OR) of all integers in the array. XOR is a bitwise operation that returns 1 if the bits are different and 0 if they are the same.

Loop to Find Differences: It then enters a loop that continues until either k or the calculated XOR value becomes zero.

Bitwise Comparison: Inside the loop, it checks if the rightmost bits of k and the calculated XOR value are different. If they are, it increments a counter.

Removing Last Bit: After the comparison, it shifts both k and the calculated XOR value to the right by dividing them by 2, effectively removing the rightmost bit.

Count Return: Finally, it returns the count of differences found during the loop, which represents the number of operations needed to make the XOR of all integers in the array equal to k.
