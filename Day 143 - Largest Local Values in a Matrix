class Solution {
    public int[][] largestLocal(int[][] grid) {
        
        int n = grid.length;

        int maxLocal[][] = new int[n-2][n-2];

        for(int i = 0; i < n - 2; i++) {
            for(int j = 0; j < n - 2; j++) {
                maxLocal[i][j] = findMax(grid, i, j);
            }
        }
        return maxLocal;
    }

    private int findMax(int grid[][], int x, int y) {
        int maxEle = 0;
        for(int i = x; i < x + 3; i++) {
            for(int j = y; j < y + 3; j++) {
                maxEle = Math.max(maxEle, grid[i][j]);
            }
        }
        return maxEle;
    }
}

Level - Easy (2373)
LOGIC: Explanation 
Example - Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]
Output: [[9,9],[8,6]]
The diagram above shows the original matrix and the generated matrix.
Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.
---------------------------------------------------------------------------------------------------------------------------
The Solution class has a method largestLocal that takes a 2D integer array grid as input and returns another 2D integer array maxLocal.

It initializes n with the length of the grid array.

It creates a new 2D array maxLocal with dimensions (n-2) x (n-2).

It iterates through the grid array using nested for loops, excluding the last two rows and columns (n-2).

Inside the loops, it calls the findMax method to find the maximum value in a 3x3 subgrid starting from position (i, j) in the grid array.

The findMax method takes the grid array and the starting position (x, y) as input and iterates through a 3x3 subgrid starting from (x, y).

It initializes maxEle to 0 and updates it to the maximum element in the subgrid using Math.max.

Finally, the maxLocal array is populated with the maximum values from each 3x3 subgrid, and it is returned as the result of the largestLocal method.
