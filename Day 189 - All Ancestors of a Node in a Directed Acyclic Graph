class Solution {
    private void dfs(List<List<Integer>> graph,int src,List<Integer> temp,boolean []vis){
        vis[src]=true;
        for(int i=0;i<graph.get(src).size();i++){
            if(!vis[graph.get(src).get(i)]){
            temp.add(graph.get(src).get(i));
            dfs(graph,graph.get(src).get(i),temp,vis);
            }
        }
    }
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            graph.get(edges[i][1]).add(edges[i][0]);
        }
        List<List<Integer>> output=new ArrayList<>();
        for(int i=0;i<n;i++){
            List<Integer> temp=new ArrayList<>();
            boolean vis[]=new boolean[n];
            dfs(graph,i,temp,vis);
            Collections.sort(temp);
            output.add(temp);
        }
        return output;
    }
}

Level - Medium (2192)
LOGIC: Explanation
Example - Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]
Output: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]
The above diagram represents the input graph.
- Nodes 0, 1, and 2 do not have any ancestors.
- Node 3 has two ancestors 0 and 1.
- Node 4 has two ancestors 0 and 2.
- Node 5 has three ancestors 0, 1, and 3.
- Node 6 has five ancestors 0, 1, 2, 3, and 4.
- Node 7 has four ancestors 0, 1, 2, and 3.
-------------------------------------------------------------------------------------------------------
Class Declaration:
The code defines a class Solution containing methods to find all ancestors of nodes in a directed graph.

Depth-First Search (DFS) Method:
The method dfs is defined to perform a depth-first search on the graph.

Parameters:
graph: A list of lists representing the adjacency list of the graph.
src: The current source node.
temp: A temporary list to store ancestors of the current node.
vis: A boolean array to keep track of visited nodes.
Functionality:
Marks the current node (src) as visited.
Iterates through all adjacent nodes of the current node.
If an adjacent node has not been visited, it adds the node to the temp list and recursively calls dfs on the adjacent node.

getAncestors Method:
This method computes the ancestors for each node in the graph.
Parameters:
n: The number of nodes in the graph.
edges: A 2D array where each element represents a directed edge from edges[i][0] to edges[i][1].

Functionality:
Initializes an adjacency list graph with n empty lists.
Populates the adjacency list such that graph[i] contains all nodes with edges pointing to i.
Initializes an empty list output to store the ancestors of each node.

For each node from 0 to n-1:
Initializes a temporary list temp to store ancestors of the current node.
Initializes a boolean array vis to track visited nodes.
Calls the dfs method to populate the temp list with ancestors of the current node.
Sorts the temp list.
Adds the temp list to the output list.
Returns the output list, where each element is a sorted list of ancestors for the corresponding node.
