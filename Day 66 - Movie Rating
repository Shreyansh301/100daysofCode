WITH USER AS
(SELECT name
FROM Users U
JOIN MovieRating R
ON U.user_id = R.user_id
GROUP BY U.user_id
ORDER BY COUNT(U.user_id) DESC, name
LIMIT 1),

MOVIE AS 
(SELECT title
FROM Movies M
JOIN MovieRating R
ON M.movie_id = R.movie_id
WHERE created_at >= '2020-02-01' AND created_at < '2020-03-01'
GROUP BY R.movie_id
ORDER BY AVG(rating) DESC, title
LIMIT 1)

SELECT name AS results FROM USER
UNION ALL
SELECT title AS results FROM MOVIE

LOGIC: Explanation 
Example - Input: 
Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+
Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+
MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+
Output: 
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+
-----------------------------------------------------------------------------------------
User Subquery (WITH USER AS ...):
Selects the user with the highest count of movie ratings.
Joins the Users (U) and MovieRating (R) tables based on the user_id.
Groups the results by user_id, orders them by the count of user_id in descending order, and then alphabetically by name.
Limits the result to the top 1 user.

Movie Subquery (WITH MOVIE AS ...):
Selects the movie with the highest average rating within a specified date range.
Joins the Movies (M) and MovieRating (R) tables based on the movie_id.
Filters the results to include only ratings created between '2020-02-01' and '2020-03-01'.
Groups the results by movie_id, orders them by the average rating in descending order, and then alphabetically by title.
Limits the result to the top 1 movie.

Main Query (SELECT name AS results FROM USER UNION ALL SELECT title AS results FROM MOVIE):
Combines the results from the USER and MOVIE subqueries using a UNION ALL operation.

The UNION ALL operation allows duplicate records to be included in the final result.
