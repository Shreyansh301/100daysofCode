class Solution {
    public int getMaximumGold(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int maxGold = 0;

        // Helper function for DFS
        class Helper {
            public int dfs(int row, int col) {
                if (row < 0 || row >= m || col < 0 || col >= n || grid[row][col] == 0) {
                    return 0;
                }

                int currentGold = grid[row][col];
                grid[row][col] = 0; // Mark the cell as visited by setting it to 0

                // Recursively explore all four directions
                int d = dfs(row + 1, col);
                int u = dfs(row - 1, col);
                int r = dfs(row, col + 1);
                int l = dfs(row, col - 1);

                // Restore the cell value
                grid[row][col] = currentGold;

                return currentGold + Math.max(Math.max(d, u), Math.max(r, l));
            }
        }

        Helper helper = new Helper();

        // Iterate over all cells in the grid
        for (int row = 0; row < m; ++row) {
            for (int col = 0; col < n; ++col) {
                if (grid[row][col] > 0) {
                    maxGold = Math.max(maxGold, helper.dfs(row, col));
                }
            }
        }

        return maxGold;
    }
}

Level - Medium (1219)
LOGIC: Explanation 
Example - Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.
-------------------------------------------------------------------------------------
The code defines a class Solution with a public method getMaximumGold that takes a 2D array grid as input and returns an integer.
It initializes variables m and n to store the number of rows and columns in the grid and sets maxGold to 0 initially.
Inside the method, it defines an inner class Helper with a method dfs that performs Depth-First Search (DFS) on the grid.
The dfs method takes parameters row and col to track the current cell being explored.
If the current cell is out of bounds or has a value of 0 (no gold), it returns 0.
Otherwise, it retrieves the value of gold in the current cell (currentGold), marks the cell as visited (by setting its value to 0), and recursively explores all four directions (down, up, right, left).
It calculates the maximum gold obtainable from the current cell and its neighbors, restores the cell's original value, and returns the total gold obtained.
The main method iterates through all cells in the grid and calls helper.dfs for cells containing gold, updating maxGold with the maximum gold obtained from any starting cell.
Finally, it returns the maxGold value, which represents the maximum amount of gold that can be obtained by starting at any cell in the grid and following certain rules (e.g., not visiting a cell twice).
