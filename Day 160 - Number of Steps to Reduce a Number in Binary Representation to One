class Solution 
{
    public int numSteps(String s)
    {
        int countSteps = 0;
        int carry = 0;
        for(int i = s.length()-1;i>=1;i--)
        {
            int rightMostBit = s.charAt(i)-'0';
            if((rightMostBit+carry) == 1)
            {
                carry=1;
                countSteps += 2;
            }
            else
            {
                countSteps++;
            }
        }
        return countSteps+carry;
    }
} 

Level - Medium (1404)
LOGIC: Explanation 
Example - Input: s = "1101"
Output: 6
"1101" corressponds to number 13 in their decimal representation.
Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.
Step 3) 7 is odd, add 1 and obtain 8.
Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  
-----------------------------------------------------------------------------------
Class and Method Definition:
The code defines a class named Solution.
Inside this class, there's a method called numSteps that takes a String parameter s.

Initial Setup:
Two variables are initialized:
countSteps to keep track of the number of steps performed, starting at 0.
carry to handle the carry in binary addition, starting at 0.

Loop through the String:
A for loop iterates through the string s from the second last character (index s.length() - 1) to the first character (index 1).

Character to Bit Conversion:
Within the loop, the rightmost bit of the current character is obtained by converting the character to an integer: s.charAt(i) - '0'.

Conditional Check for Carry:
If the sum of the rightmost bit and the carry is 1:
Set carry to 1 (indicating there will be a carry for the next iteration).
Increase countSteps by 2 (one step for adding and one for the carry step).

If the sum is not 1:
Simply increase countSteps by 1 (indicating only one step was needed, either a division or addition).

Final Step Count Adjustment:
After exiting the loop, add the value of carry to countSteps. This accounts for any carry that might still exist after the loop.

Return the Result:
The method returns the total number of steps calculated.
