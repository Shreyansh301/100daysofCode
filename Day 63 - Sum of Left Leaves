class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null) return 0;

        int sum = 0;
        Stack<TreeNode> st = new Stack();
        st.add(root);

        while(!st.isEmpty()){
            TreeNode node = st.pop();

            if(node.left != null){
                if(node.left.left == null && node.left.right == null){
                    sum += node.left.val;
                }else{
                    st.add(node.left);
                }
            }

            if(node.right != null){
                if(node.right.left != null || node.right.right != null){
                    st.add(node.right);
                }
            }
        }

        return sum;
    }
}

LOGIC: Explanation 
Example - Input: root = [3,9,20,null,null,15,7]
Output: 24
There are two left leaves in the binary tree, with values 9 and 15 respectively.
--------------------------------------------------------------------------------------
The code defines a class named Solution.
The class has a method named sumOfLeftLeaves that takes a TreeNode as an argument and returns an integer.
Inside the method, there is a check for a null root. If the root is null, the method returns 0.
It initializes a variable sum to 0, which will be used to store the sum of left leaves.
It uses a Stack<TreeNode> named st to perform a depth-first traversal of the binary tree.
It pushes the root node onto the stack to start the traversal.
The code enters a while loop that continues until the stack is empty.
Inside the loop, it pops a node from the stack.
For each popped node, it checks if it has a left child. If it does, it further checks whether the left child is a leaf node (both left and right children are null). 
If it's a leaf, the value of the left child is added to the sum. If not a leaf, the left child is pushed onto the stack for further exploration.
For the current node, if it has a right child, it checks if the right child has any children (left or right). If it does, the right child is pushed onto the stack for further exploration.
The loop continues until all nodes are processed.

Finally, the method returns the sum of left leaves.
