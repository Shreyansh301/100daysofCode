class Solution {
    public int countTriplets(int[] arr) {
        int ans = 0;
        int n = arr.length;
        for (int i = 0; i < n; ++i) {
            int val = arr[i];
            for (int k = i + 1; k < n; ++k) {
                if ((val ^= arr[k]) == 0) {
                    ans += k - i;
                }
            } 
        }
        return ans;
    }
}

Level - Medium (1442)
LOGIC: Explanation 
Example - Input: arr = [2,3,1,6,7]
Output: 4
The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)
------------------------------------------------------------------------
Method Definition: The method countTriplets takes an integer array arr as input and returns an integer.
Initialize Counter: ans is initialized to 0 to count the number of triplets.
Get Array Length: n is assigned the length of the array arr.
Outer Loop: The first for loop iterates through each element in the array with index i.
Initialize XOR Value: val is initialized to the current element arr[i].
Inner Loop: The second for loop iterates from the next element after i to the end of the array with index k.
XOR Calculation: val is XORed with arr[k] in each iteration.
Check XOR Result: If the result of the XOR operation (val) is 0, it indicates a valid triplet.
Update Counter: If a valid triplet is found, ans is incremented by k - i.
Return Result: After both loops complete, ans is returned as the final count of triplets.
Code essentially counts the number of triplets (i, j, k) such that the XOR of all elements from index i to k (inclusive) is zero.
