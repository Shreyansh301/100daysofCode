class Solution {
    public String nearestPalindromic(String n) {
        if (Long.parseLong(n) == 1) { return "0"; }
        char[] arr = n.toCharArray();
        int mid = arr.length / 2;
        
        return getClosestPalindrome(arr, mid - (1 - arr.length % 2), mid);  
    }
    String getNextPalindromeForPalindromeNumber(String palinString, int beforeMid, int afterMid) {
        int carry = 1;
        char[] num = palinString.toCharArray();
        
        while (beforeMid >= 0) {
            int number = (num[beforeMid] - '0');
            number += carry;
            num[beforeMid] = (char)(number % 10 + '0');
            num[afterMid] = (char)(number % 10 + '0');;
            carry = number / 10;
            beforeMid--;
            afterMid++;
        }
        if (carry == 1) {
            char[] numNew = new char[num.length + 1];
            Arrays.fill(numNew, '0');
            numNew[numNew.length - 1] = '1';
            numNew[0] = '1';
            return new String(numNew);
        } else {
            return new String(num);
        }
    }
    String getPrevPalindromeForPalindromeNumber(String palinString, int beforeMid, int afterMid) {
        int carry = 1;
        char[] num = palinString.toCharArray();
        
        while (beforeMid >= 0) {
            int number = (num[beforeMid] - '0');
            number = (number == 0 && carry == 1) ? 10 : number;
            number -= carry;
            num[beforeMid] = (char)(number + '0');
            num[afterMid] = (char)(number + '0');;
            carry = (number == 9 && carry == 1) ? 1 : 0;
            beforeMid--;
            afterMid++;
        }
        if (num[0] == '0') {
            char[] numNew = new char[num.length - 1];
            Arrays.fill(numNew, '9');
            return new String(numNew);
        } else {
            return new String(num);
        }
    }
    String getClosestPalindrome(char[] num, int beforeMid, int afterMid) {
        Long originalNum = Long.parseLong(new String(num));
        
        while (beforeMid >= 0) {
            if (num[beforeMid] != num[afterMid]) {
                if (num[beforeMid] > num[afterMid]) {
                    num[afterMid] = num[beforeMid];
                } else {
                    num[afterMid] = num[beforeMid];
                }
            }
            beforeMid--;
            afterMid++;
        }
        String palinString = new String(num);
        Long palinNum = Long.parseLong(palinString);
        
        String prevPalinString = null;
        String nextPalinString = null;
        if (palinNum.equals(originalNum)) {
            prevPalinString = getPrevPalindromeForPalindromeNumber(palinString, (num.length / 2) - (1 - num.length % 2), num.length / 2);
            nextPalinString = getNextPalindromeForPalindromeNumber(palinString, (num.length / 2) - (1 - num.length % 2), num.length / 2);
        } else if (palinNum < originalNum) {
            prevPalinString = palinString;
            nextPalinString = getNextPalindromeForPalindromeNumber(palinString, (num.length / 2) - (1 - num.length % 2), num.length / 2);
        } else {
            prevPalinString = getPrevPalindromeForPalindromeNumber(palinString, (num.length / 2) - (1 - num.length % 2), num.length / 2);  
            nextPalinString = palinString;
        }
        Long prevPalinNum = Long.parseLong(prevPalinString);
        Long nextPalinNum = Long.parseLong(nextPalinString);

        if ((originalNum - prevPalinNum) <= (nextPalinNum - originalNum)) {
            return prevPalinString;    
        } else {
            return nextPalinString;
        }
    }
}

LOGIC: Explanation 
Example - Input: n = "123"
Output: "121"

----------------------------------------------------------------------------------------------------------------------------------------------

This Java code is an implementation of finding the nearest palindrome to a given number n. 
The main logic revolves around manipulating the digits of the number to construct palindromes and then comparing them to find the closest one.

nearestPalindromic Method:
Checks if the input number n is equal to 1. If yes, returns "0" because the nearest palindrome to 1 is 0.
Converts the input number n to a character array arr.
Calculates the middle index mid of the array.

getClosestPalindrome Method:
Takes a character array num and two indices, beforeMid and afterMid, which represent the indices before and after the middle point of the number.
Converts the array num to a Long value called originalNum.
Iterates from the middle towards the beginning and end of the array, ensuring that the digits on the right side mirror the digits on the left side.
Calculates the palindrome number as a string and converts it to a Long value (palinNum).

getPrevPalindromeForPalindromeNumber Method:
Takes a palindrome string (palinString), beforeMid, and afterMid.
Decreases the palindrome number by 1 by adjusting the digits from the middle towards the ends.

getNextPalindromeForPalindromeNumber Method:
Takes a palindrome string (palinString), beforeMid, and afterMid.
Increases the palindrome number by 1 by adjusting the digits from the middle towards the ends.

Main Logic in getClosestPalindrome Method:
Checks if the constructed palindrome (palinNum) is equal to the original number (originalNum).
If equal, calculates the previous and next palindromes using getPrevPalindromeForPalindromeNumber and getNextPalindromeForPalindromeNumber.
Compares the differences between the original number and the previous and next palindromes.
Returns the closest palindrome.

Returning the Result:
The nearestPalindromic method returns the result obtained from the getClosestPalindrome method.

