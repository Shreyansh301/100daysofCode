class Solution {
    public String removeKdigits(String num, int k) {
        int digits = num.length() - k;
        if (num. length() <= k) return "0";
        int top = -1, start = 0;
        char[] st = num.toCharArray();
        for (int i = 0; i < st.length; i++) {
            while (top >= 0 && st[top] > st[i] && k > 0) {
                top--;
                k--;
            }
            top++;
            st[top] = st[i];
        }
        while (start <= top && st[start] == '0') start++;

        String ans = "";
        for(int i = start; i < digits; i++)
        ans = ans + st [i];

        if(ans.equals("")) return "0";
        return ans;
    }
}

Level - Medium (402)
LOGIC: Explanation
Example - Input: num = "1432219", k = 3
Output: "1219"
Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
--------------------------------------------------------------------------------------------------
1. Calculate the maximum number of digits allowed (digits = num.length() - k):
   - This step determines how many digits we can keep after removing 'k' digits from the original number. For example, if the original number has 7 digits and we need to remove 2 digits (k = 2), then we can keep 5 digits in the final result.

2. Initialize stack and pointers (top, start) for processing digits:
   - We create a stack (`st`) to hold digits temporarily. The 'top' pointer keeps track of the top element in the stack, and 'start' points to the start of the valid digits in the stack.

3. Iterate through the number and process digits:
   - We convert the input number (`num`) into a character array (`st`) for easy manipulation. Then, we loop through each digit in the array.
   - Within the loop, we check if the current digit is smaller than the digit at the top of the stack and if there are still removals (`k > 0`) left. If so, we pop elements from the stack until either condition is false.
   - This process ensures that we keep smaller digits towards the front of the final result, making the number as small as possible.

4. Skip leading zeros in the final answer:
   - After processing all digits, we check for any leading zeros in the result. We increment the 'start' pointer until we reach a non-zero digit, ensuring that the final answer doesn't have leading zeros.

5. Construct and return the resulting string or "0" if empty:
   - Finally, we construct the resulting string (`ans`) by concatenating the digits in the stack from 'start' to 'digits'. If the resulting string is empty (which happens if all digits were removed), we return "0" as the answer.

This approach effectively removes 'k' digits from the input number while ensuring that the remaining digits form the smallest possible number.
