class Solution {
    public int searchInsert(int[] nums, int target) {
        int l = 0;
        int r = nums.length-1;
        if (target<nums[l]) return 0;
        if (target>nums[r]) return nums.length;
        while (l<r) {
            int val = l+(r-l)/2;
            if (nums[val] == target) return val;
            if (nums[val] < target) l = val+1;
            else r = val;
        }    
        return l;
    }
}

LOGIC: Exaplanation 
Example - Input: nums = [1,3,5,6], target = 5
Output: 2
------------------------------------------------------------
Declare a method searchInsert that takes an integer array nums and an integer target as parameters and returns an integer.

Initialize variables l and r to keep track of the left and right boundaries of the array, respectively. Set l to 0 and r to nums.length - 1.

Check if the target is less than the first element of nums. If so, return 0 because the target should be inserted at the beginning of the array.

Check if the target is greater than the last element of nums. If so, return nums.length because the target should be inserted at the end of the array.

Enter a while loop as long as l is less than r.

Calculate the midpoint val using binary search logic: val = l + (r - l) / 2.

Check if nums[val] is equal to the target. If so, return val as the index where the target is found.

If nums[val] is less than the target, update l to val + 1 to search the right half of the array.

If nums[val] is greater than or equal to the target, update r to val to search the left half of the array.

If the while loop exits without finding the target, return l as the index where the target should be inserted in the sorted array.

End of the method
