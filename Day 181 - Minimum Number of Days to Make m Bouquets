class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int s = 0, e = (int)1e9;
        int ans = -1;

        while (s <= e) {
            int mid = s + (e - s) / 2;
            int con = 0, buk = 0;

            for (int i = 0; i < bloomDay.length; i++) {
                if (bloomDay[i] <= mid) {
                    con++;
                    if (con >= k) {
                        buk++;
                        con = 0;
                    }
                } else {
                    con = 0;
                }
            }

            if (buk >= m) {
                ans = mid;
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }
        return ans;
    }
}

Level - Medium (1482)
LOGIC: Explanation 
Example - Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.
---------------------------------------------------------------------------------------------------------------------------------
Function Definition: The function minDays determines the minimum number of days needed for m bouquets of k flowers each to bloom.

Initialize Variables:
s (start) is set to 0.
e (end) is set to 1 billion (1e9), representing the upper limit of days.
ans (answer) is initialized to -1.

Binary Search Loop:
While s is less than or equal to e, perform the following steps:
Calculate Midpoint: mid is set to the average of s and e.

Count Bouquets:
con (consecutive flowers) is set to 0.
buk (bouquets) is set to 0.
Iterate through each element in bloomDay:
If bloomDay[i] is less than or equal to mid, increment con.
If con reaches k, increment buk and reset con to 0.
If bloomDay[i] is greater than mid, reset con to 0.

Check Bouquets Count:
If buk is greater than or equal to m, set ans to mid and adjust e to mid - 1 to search for fewer days.
If buk is less than m, adjust s to mid + 1 to search for more days.

Return Result: Return ans as the minimum number of days required.
