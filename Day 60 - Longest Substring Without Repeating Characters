class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int maxLength = 0;
        Set<Character> charSet = new HashSet<>();
        int left = 0;
        
        for (int right = 0; right < n; right++) {
            if (!charSet.contains(s.charAt(right))) {
                charSet.add(s.charAt(right));
                maxLength = Math.max(maxLength, right - left + 1);
            } else {
                while (charSet.contains(s.charAt(right))) {
                    charSet.remove(s.charAt(left));
                    left++;
                }
                charSet.add(s.charAt(right));
            }
        }
        
        return maxLength;
    }
}

LOGIC: Explanation 
Example - Input: s = "abcabcbb"
Output: 3
The answer is "abc", with the length of 3. 
---------------------------------------------------------------------------------
Function Signature:
public int lengthOfLongestSubstring(String s): This function takes a string s as input and returns an integer representing the length of the longest substring without repeating characters.

Variables:
n: Represents the length of the input string s.
maxLength: Tracks the maximum length of the substring without repeating characters.
charSet: A HashSet that stores unique characters in the current substring.
left: Represents the left boundary of the current substring.

Sliding Window Approach:
The code uses a sliding window approach to traverse the string from left to right, maintaining a substring without repeating characters.

Main Loop:
The main loop iterates over each character in the string s using the right pointer.

Checking for Repeating Characters:
If the current character is not in the charSet, it is added to the set, and the maxLength is updated based on the length of the current substring.
If the character is already in the set, it signifies a repeating character. The code then enters a while loop to remove characters from the charSet until the repeating character is no longer present.

Updating Substring Boundaries:
The left pointer is moved to the right by one, and the process continues until the current character is no longer a repeating character.

Tracking Maximum Length:
The maximum length of the substring without repeating characters is updated during each iteration of the loop.

Result:
The final result is the maximum length of the substring without repeating characters.
