class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, (a, b) -> {
            if (a[0] == b[0]) {
                return Integer.compare(a[1], b[1]);
            }
            return Integer.compare(a[0], b[0]);
        });

        int count = 0;
        long prevlast = points[0][1]; // Use long to handle large numbers

        for (int i = 1; i < points.length; i++) {
            if (prevlast >= points[i][0]) {
                if (prevlast > points[i][1]) {
                    prevlast = points[i][1];
                }
            } else {
                prevlast = points[i][1];
                count++;
            }
        }

        return count + 1;
    }
}

LOGIC: Explanation 
Example - Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
 The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
---------------------------------------------------------------------------------
The code defines a class named Solution with a method findMinArrowShots that takes a 2D array of points as input.

It sorts the points array based on their first element (a[0]) in ascending order. If the first elements are equal, it sorts based on the second element (a[1]).

It initializes a count variable to keep track of the number of shots needed and a prevlast variable to store the end point of the previous arrow.

It loops through the sorted points array starting from the second element (index 1).

If the previous arrow's end point (prevlast) is greater than or equal to the current point's start (points[i][0]), it checks if the previous arrow's end point is greater than the current point's end (points[i][1]). 
If so, it updates prevlast to the current point's end.

If the previous arrow's end point is not greater than or equal to the current point's start, it updates prevlast to the current point's end and increments the count variable.

Finally, it returns count + 1, which represents the minimum number of arrows needed to burst all balloons in the points array.
