class Solution  {
      public int findShortestCycle(int n, int[][] edges) {
        List<Integer>[] adj = new List[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj[u].add(v);
            adj[v].add(u);
        }

        int minCycle = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int[] dist = new int[n];
            Arrays.fill(dist, -1);
            Queue<Integer> queue = new LinkedList<>();
            queue.offer(i);
            dist[i] = 0;
            while (!queue.isEmpty()) {
                int u = queue.poll();
                for (int v : adj[u]) {
                    if (dist[v] == -1) {
                        dist[v] = dist[u] + 1;
                        queue.offer(v);
                    } else if (v != i && dist[v] >= dist[u]) {
                        minCycle = Math.min(minCycle, dist[u] + dist[v] + 1);
                    }
                }
            }
        }

        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;
    }
}

Level - Hard (2608)
LOGIC: Explanation 
Example - Input: n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]
Output: 3
The cycle with the smallest length is : 0 -> 1 -> 2 -> 0 
------------------------------------------------------------------------------------------------------------
This Java code finds the length of the shortest cycle in an undirected graph represented as an adjacency list. 
It initializes an adjacency list to represent the graph, where each node has a list of neighboring nodes.
It populates the adjacency list based on the provided edges array, adding both directions for each edge since the graph is undirected.
It iterates through each node in the graph and performs a BFS (Breadth-First Search) starting from that node.
During the BFS, it keeps track of the distance from the starting node to each visited node.
If it encounters a node that has been visited before (excluding the starting node) and the distance to that node is greater than or equal to the distance to its parent node, 
it updates the minimum cycle length if a shorter cycle is found.

Finally, it returns the length of the shortest cycle found, or -1 if no cycle exists
