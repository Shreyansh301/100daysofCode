public class Solution {
    public void deleteNode(ListNode nodeToDelete) {
        ListNode previousNode = null; // Initialize a pointer to keep track of the previous node
        while (nodeToDelete != null && nodeToDelete.next != null) {
            // Copy the value of the next node to the current node
            nodeToDelete.val = nodeToDelete.next.val;
            previousNode = nodeToDelete; // Update the previous node pointer
            nodeToDelete = nodeToDelete.next; // Move to the next node
        }

        // If the previous node exists, set its next pointer to null to remove the last node
        if (previousNode != null) {
            previousNode.next = null;
        }
    }
} 

Level - Medium (237)
LOGIC: Explanation 
Example - Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.
-----------------------------------------------------------------------------------------------------------------------
It takes a parameter nodeToDelete which is the node to be deleted.
It initializes a pointer previousNode to keep track of the previous node in the list.
It enters a loop to traverse the list until the end or until nodeToDelete becomes null.
In each iteration, it copies the value of the next node to the current node (nodeToDelete), effectively "deleting" the current node by overwriting its value with the next node's value.
It updates previousNode to point to the current node (nodeToDelete) and moves nodeToDelete to the next node.
After the loop, if previousNode is not null (meaning nodeToDelete was not the head of the list), it sets the next pointer of previousNode to null to remove the last node.
