public class Solution {
    public int timeRequiredToBuy(int[] v, int k) {
        int n = v.length;
        int t = 0;
        while (true) {
            for (int i = 0; i < n; i++) {
                if (v[i] > 0) {
                    v[i] = v[i] - 1;
                    t++;
                }
                if (i == k && v[i] == 0)
                    return t;
            }
        }
    }
}

Level - Easy (2073)
LOGIC: Explanation 
Example - Input: tickets = [2,3,2], k = 2
Output: 6
Explanation: 
- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].
- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].
The person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.
--------------------------------------------------------------------------------------------------
This Java code defines a public class named Solution with a method timeRequiredToBuy that takes an integer array v and an integer k as parameters and returns an integer.
Inside the method, it initializes variables n as the length of the array v and t as 0 to track the time required to buy items.
The method uses an infinite loop (while (true)) to repeatedly iterate over the array elements until a condition is met.
Within the loop, it iterates through each element of the array using a for loop with the index i.
If the value at index i in the array v is greater than 0 (v[i] > 0), it decrements the value by 1 (v[i] = v[i] - 1) and increments the time t by 1.
If the current index i is equal to the provided index k and the value at that index becomes 0 (i == k && v[i] == 0), it returns the accumulated time t.
This algorithm essentially simulates buying items one by one from the array v until the specified index k has no more items (v[k] == 0), and it returns the time taken to do so.
