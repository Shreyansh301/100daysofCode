class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = {-1, -1};
        int left = binarySearch(nums, target, true);
        int right = binarySearch(nums, target, false);
        result[0] = left;
        result[1] = right;
        return result;        
    }

    private int binarySearch(int[] nums, int target, boolean isSearchingLeft) {
        int left = 0;
        int right = nums.length - 1;
        int idx = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                idx = mid;
                if (isSearchingLeft) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
        }

        return idx;
    }

}

Level - Medium (34)
LOGIC: Explanation 
Example -
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
-----------------------------------------------------------------------------------------------
SearchRange Method:

This method takes in an array of numbers nums and a target number target.
It creates an array result with two slots initialized to -1, which is the default value if the target is not found.
It calls the binarySearch method twice: once to find the leftmost occurrence of the target and once to find the rightmost occurrence.
Finally, it updates the result array with the leftmost and rightmost indices where the target is found and returns the result array.
BinarySearch Method:

This method takes in the array nums, the target number target, and a boolean isSearchingLeft which indicates whether to search for the leftmost occurrence or not.
It initializes left to 0 (the start of the array) and right to the last index of the array.
It also initializes idx to -1, which will store the index of the target if found.
It uses a while loop to perform binary search until left is less than or equal to right.
Inside the loop, it calculates the mid index using binary search logic.
If the element at mid is greater than the target, it updates right to search the left half of the array.
If the element at mid is less than the target, it updates left to search the right half of the array.
If the element at mid is equal to the target, it updates idx to mid and adjusts left or right depending on whether it's searching for the leftmost or rightmost occurrence.
Finally, it returns the idx, which contains the index of the target element.

The searchRange method utilizes binary search twice (once for leftmost and once for rightmost) to find the range of indices where the target number occurs in the given array nums.
