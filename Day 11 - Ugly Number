class Solution {
    public boolean isUgly(int n) {
    if(n == 0)
    return false;

    for(final int prime : new int[]{2,3,5})  
    while (n% prime == 0)
    n /= prime;
    return n == 1;
    }
}

LOGIC: Explanation 
Example - Input: n = 6
Output: true
Explanation: 6 = 2 Ã— 3
 
This method checks whether a given number n is an "ugly" number or not. An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5
The method isUgly takes an integer n as a parameter.
The first conditional statement checks if n is 0, in which case it returns false because 0 is not considered an ugly number.
The method then iterates through an array of prime factors {2, 3, 5}.
Inside the loop, it uses a while loop to repeatedly divide n by the current prime factor as long as n is divisible by that factor.
The loop effectively removes all occurrences of the prime factors 2, 3, and 5 from n.
After the loop, the method checks if n is equal to 1. If so, it means that n has no prime factors other than 2, 3, and 5, and it returns true indicating that n is an ugly number. 
If n is not equal to 1, it means that there are other prime factors, and the method returns false.

