class Solution {
  public int canCompleteCircuit(int[] gas, int[] cost) {
    int[] sum = new int[2];
    int fuelAvailable = 0;
    for (int i = 0; i < gas.length; ) {
      int reachedIndex = travel(fuelAvailable, gas, cost, i, sum);
      if (reachedIndex == gas.length - 1) {
        if (sum[0] >= sum[1]) {
          return i;
        }
      }
      i = reachedIndex + 1;
    }
    return -1;
  }

  private int travel(int fuelAvialable, int[] gas, int[] cost, int startIndex, int[] sum) {
    int index = startIndex;
    while (index < cost.length && fuelAvialable >= 0) {
      sum[0] += gas[index];
      sum[1] += cost[index];
      fuelAvialable += gas[index] - cost[index];
      index++;
    }
    return index - 1;
  }
}

LOGIC: Explanation 
Example - Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
---------------------------------------------------------------------------------------------------------
Method canCompleteCircuit:

Takes two arrays as input, gas and cost, representing the amount of gas at each station and the cost to travel to the next station.
Initializes an array sum of size 2 to store the cumulative sum of gas and cost during the travel.
Initializes fuelAvailable to 0, representing the current available fuel.
Iterates through the stations using a for loop with the index variable i.
Calls the travel method to simulate traveling from the current station (index i) and updates the sum array.
Checks if the reached index is the last station, and if so, compares the cumulative gas and cost sums. If gas sum is greater than or equal to cost sum, returns the current starting index i.
Updates the loop variable i to the next station's index.

Method travel:

Takes the current available fuel, gas array, cost array, starting index, and an array sum as parameters.
Initializes a local variable index to the starting index.
Uses a while loop to simulate travel until the end of the stations or until fuel is exhausted.
Updates the sum array with cumulative gas and cost values.
Adjusts the fuelAvailable based on the difference between gas and cost at the current station.
Returns the index of the last station reached.

Overall Explanation:

The canCompleteCircuit method attempts to find a starting station from which a circular tour can be completed with the given gas and cost arrays.
It iterates through the stations, simulating travel with the travel method and checking if a circular tour is possible.
If a valid starting station is found, the method returns that index; otherwise, it returns -1.
