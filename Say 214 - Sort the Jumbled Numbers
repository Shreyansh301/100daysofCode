class Solution {
    public int[] sortJumbled(int[] mapping, int[] nums) {
        // Step 1: Create a list to store original nums and their mapped values
        List<int[]> mappedList = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            String s = Integer.toString(nums[i]);
            StringBuilder n = new StringBuilder();
            for (char ch : s.toCharArray()) {
                n.append(mapping[ch - '0']);
            }
            mappedList.add(new int[]{nums[i], Integer.parseInt(n.toString()), i});
        }

        // Step 2: Sort the list based on the mapped values and original indices for stability
        mappedList.sort((a, b) -> {
            if (a[1] != b[1]) {
                return Integer.compare(a[1], b[1]);
            } else {
                return Integer.compare(a[2], b[2]);
            }
        });

        // Step 3: Create a result array and fill it with the sorted original nums
        int[] sortedNums = new int[nums.length];
        for (int i = 0; i < mappedList.size(); i++) {
            sortedNums[i] = mappedList.get(i)[0];
        }

        return sortedNums;
    }
}

/*
Level - Medium (2191)
LOGIC: Explanation 
Example - Input: mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]
Output: [338,38,991]
Map the number 991 as follows:
1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.
2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.
Therefore, the mapped value of 991 is 669.
338 maps to 007, or 7 after removing the leading zeros.
38 maps to 07, which is also 7 after removing leading zeros.
Since 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.
Thus, the sorted array is [338,38,991].
------------------------------------------------------------------------------------------------------
Class and Method Definition:
A public class Solution is defined.
Inside the class, a public method sortJumbled is defined, which takes two integer arrays as parameters: mapping and nums.

Create Mapped List:
A list of integer arrays mappedList is created to store the original numbers, their mapped values, and their original indices.
A loop iterates through each number in nums:
The number is converted to a string.
A StringBuilder is used to build the mapped value by converting each digit using the mapping array.
The original number, its mapped value (as an integer), and its original index are added to mappedList.

Sort the List:
mappedList is sorted using a custom comparator:
The comparator first compares the mapped values (a[1] and b[1]).
If the mapped values are equal, it compares the original indices (a[2] and b[2]) to maintain stability.

Create Result Array:
An integer array sortedNums is created to store the sorted original numbers.
A loop iterates through the sorted mappedList, filling sortedNums with the original numbers in their new order.

Return Result:
The sorted array sortedNums is returned.
 */