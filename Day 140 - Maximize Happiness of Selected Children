class Solution {
    public long maximumHappinessSum(int[] happiness, int k) {
        int happinessSize = happiness.length;
        
        // Convert the array to an Integer array for sorting in descending order
        Integer[] happinessArray = new Integer[happinessSize];
        for(int i = 0; i < happinessSize; i++) {
            happinessArray[i] = happiness[i];
        }
        
        Arrays.sort(happinessArray, Collections.reverseOrder());

        long totalHappinessSum = 0;
        int turns = 0;
        
        // Calculate the maximum happiness sum
        for(int i = 0; i < k; i++) {
            // Adjust happiness and ensure it's not negative
            totalHappinessSum += Math.max(happinessArray[i] - turns, 0);  

             // Increment turns for the next iteration
            turns++; 
        }
        
        return totalHappinessSum;
    }
}

Level - Medium (3075)
LOGIC: Explanation 
Example - Input: happiness = [1,2,3], k = 2
Output: 4
We can pick 2 children in the following way:
- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].
- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.
The sum of the happiness values of the selected children is 3 + 1 = 4.
---------------------------------------------------------------------------------------
Input Parameters:
happiness: An array of integers representing happiness values.
k: An integer representing the number of turns.

Array Sorting:
Converts the happiness array to an Integer array for sorting in descending order.
Uses Arrays.sort along with Collections.reverseOrder() to sort the happinessArray in descending order.

Total Happiness Calculation:
Initializes totalHappinessSum to 0 and turns to 0.
Loops k times to calculate the maximum happiness sum.
Calculates the adjusted happiness for each element using Math.max(happinessArray[i] - turns, 0) to ensure it's not negative.
Adds the adjusted happiness to totalHappinessSum.
Increments turns for the next iteration.

Return Value:
Returns totalHappinessSum, which represents the maximum sum of happiness after k turns.
