class Solution {
  public int maxScoreWords(String[] words, char[] letters, int[] score) {
    int[] count = new int[26];
    for (final char c : letters)
      ++count[c - 'a'];
    return dfs(words, 0, count, score);
  }

  // Returns the maximum score you can get from words[s..n).
  private int dfs(String[] words, int s, int[] count, int[] score) {
    int ans = 0;
    for (int i = s; i < words.length; ++i) {
      final int earned = useWord(words, i, count, score);
      if (earned > 0)
        ans = Math.max(ans, earned + dfs(words, i + 1, count, score));
      unuseWord(words, i, count);
    }
    return ans;
  }

  int useWord(String[] words, int i, int[] count, int[] score) {
    boolean isValid = true;
    int earned = 0;
    for (final char c : words[i].toCharArray()) {
      if (--count[c - 'a'] < 0)
        isValid = false;
      earned += score[c - 'a'];
    }
    return isValid ? earned : -1;
  }

  void unuseWord(String[] words, int i, int[] count) {
    for (final char c : words[i].toCharArray())
      ++count[c - 'a'];
  }
}

Level - Hard (1255)
LOOGIC: Explanation 
Example - Input: words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23
Score  a=1, c=9, d=5, g=3, o=2
Given letters, we can form the words "dad" (5+1+5) and "good" (3+2+2+5) with a score of 23.
Words "dad" and "dog" only get a score of 21.
---------------------------------------------------------------------------------------------------------------
Class Definition: Defines the Solution class containing methods to solve the problem.

Main Method (maxScoreWords):
Initializes a count array for letter frequencies.
Fills the count array with the frequency of each letter in the letters array.
Calls the dfs method to find the maximum score using the words.

Depth-First Search Method (dfs):
Iterates over words starting from index s.
For each word, attempts to use it and calculates the score (earned).
If the word is valid (all characters available in the count), recursively calls dfs for the next set of words, updating the maximum score (ans).
Restores the count array after each attempt to use a word.

Word Usage Method (useWord):
Checks if the word can be formed with the available letters (count array).
Updates the count array by decrementing the counts for each character in the word.
Calculates the score for the word if valid, otherwise returns -1.

Word Reversal Method (unuseWord):
Restores the count array by incrementing the counts for each character in the word, effectively "unusing" the word.

Supportive Methods: The useWord and unuseWord methods manage the letter count array, ensuring the correct backtracking in the DFS process.
