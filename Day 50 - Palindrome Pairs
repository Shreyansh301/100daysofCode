class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<>();

        // Word, index
        Map<String, Integer> wordMap = new HashMap<>();
        // Length of each word
        Set<Integer> set = new TreeSet<>();

        for (int i = 0; i < words.length; i++) {
            wordMap.put(words[i], i);
            set.add(words[i].length());
        }

        // For each word, we try to divide it to substrings
        // and try to lookup the cache.
        for (int i = 0; i < words.length; i++) {
            int length = words[i].length();
            String reverse= new StringBuilder(words[i]).reverse().toString();

            // If there is a straight reverse, add them.
            if(wordMap.containsKey(reverse) && wordMap.get(reverse) != i)
                res.add(Arrays.asList(i, wordMap.get(reverse)));
            
            // for each length in set. Only check potential length.
            for(Integer k : set){
                if(k==length)
                    break;
                
                if(isPalindrome(reverse, 0, length-1-k)){
                    String s1 = reverse.substring(length-k);
                    if(wordMap.containsKey(s1))
                        res.add(Arrays.asList(i,wordMap.get(s1)));
                }
                
                if(isPalindrome(reverse,k,length-1)){
                    String s2 = reverse.substring(0,k);
                    if(wordMap.containsKey(s2))
                        res.add(Arrays.asList(wordMap.get(s2),i));
                }
            }
        }
        return res;
    }

    private boolean isPalindrome(String s, int start, int end) {
        while (start <= end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}

LOGIC: Explanation 
Example - Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
The palindromes are ["abcddcba","dcbaabcd","slls","llssssll"]
-------------------------------------------------------------------------------------------

This Java code is an implementation of finding all pairs of palindrome words in a given array of strings. The goal is to identify pairs of words such that concatenating them (in any order) results in a palindrome. 

Data Structures:
List<List<Integer>> res: The result list that will store pairs of indices forming palindrome pairs.
Map<String, Integer> wordMap: A map to store each word along with its corresponding index in the input array.
Set<Integer> set: A set to store unique lengths of words in the input array.

Populating Word Map and Set:
The code initializes wordMap by associating each word with its index in the array.
It also populates a set set with the unique lengths of words in the input array.

Checking for Palindrome Pairs:
The code iterates over each word in the input array.
For each word, it reverses the word and checks if the reverse exists in wordMap and is not the same word (avoiding self-palindromes). If true, it adds the indices to the result list.
For each potential length in the set, it checks for substrings that could form palindromes with the current word.
If a palindrome is found at the beginning of the reversed word, it checks if the remaining substring is present in wordMap and adds the indices to the result list.
If a palindrome is found at the end of the reversed word, it checks if the preceding substring is present in wordMap and adds the indices to the result list.

Helper Method - isPalindrome:
This method checks if a given substring of a word is a palindrome by comparing characters from both ends until the pointers meet in the middle.

Result:
The final result is a list of pairs of indices, representing words in the input array that can be concatenated to form palindrome pairs.
