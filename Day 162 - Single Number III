class Solution {
    public int[] singleNumber(int[] nums) {
    int xor = 0;
    for (int num : nums) {
        xor ^= num;
    }
    
    int mask = 1;
    while ((xor & mask) == 0) {
        mask <<= 1;
    }
    
    int num1 = 0;
    int num2 = 0;
    
    for (int num : nums) {
        if ((num & mask) == 0) {
            num1 ^= num;
        } else {
            num2 ^= num;
        }
    }
    
    return new int[]{num1, num2};
}
}

Level - Medium (260)
LOGIC: Explanation 
Example - Input: nums = [1,2,1,3,2,5]
Output: [3,5]
[5, 3] is also a valid answer.
-------------------------------------------------
Initialize XOR variable: int xor = 0;
This will hold the XOR of all numbers in the array.

Calculate XOR of all elements:
Loop through each number in nums and XOR it with xor.
for (int num : nums) { xor ^= num; }
This step will result in xor being the XOR of the two unique numbers because duplicates will cancel out.

Find rightmost set bit mask:
Initialize a mask variable: int mask = 1;
Shift mask left until it isolates the rightmost set bit in xor.
while ((xor & mask) == 0) { mask <<= 1; }

Initialize two result variables:
int num1 = 0; int num2 = 0;
These will hold the two unique numbers.

Divide numbers into two groups and XOR within groups:
Loop through each number in nums.
If the number's corresponding bit (determined by mask) is 0, XOR it with num1.
If the bit is 1, XOR it with num2.
for (int num : nums) { if ((num & mask) == 0) { num1 ^= num; } else { num2 ^= num; } }

Return the result:
Return the two unique numbers as an array: return new int[]{num1, num2};
This algorithm efficiently finds the two unique numbers in an array where all other numbers appear exactly twice.
