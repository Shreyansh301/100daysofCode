SELECT Customers.name as Customers
FROM Customers
LEFT JOIN Orders ON Customers.Id = Orders.customerId
WHERE Orders.id IS null;

LOGIC: Explanation 
Example - Input: 
Customers table:
+----+-------+
| id | name  |
+----+-------+
| 1  | Joe   |
| 2  | Henry |
| 3  | Sam   |
| 4  | Max   |
+----+-------+
Orders table:
+----+------------+
| id | customerId |
+----+------------+
| 1  | 3          |
| 2  | 1          |
+----+------------+
Output: 
+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+
-----------------------------------------------------------------------
SELECT Customers.name as Customers: This part of the query selects the "name" column from the "Customers" table and aliases it as "Customers."

FROM Customers: Specifies that the data is being retrieved from the "Customers" table.

LEFT JOIN Orders ON Customers.Id = Orders.customerId: Performs a LEFT JOIN between the "Customers" and "Orders" tables based on the condition that the "Id" column in the "Customers" table matches the "customerId" column in the "Orders" table. 
This means that all records from the "Customers" table will be included in the result, and matching records from the "Orders" table will be joined.

WHERE Orders.id IS null: Adds a condition to filter the results, only selecting rows where there is no corresponding entry in the "Orders" table, meaning that the customer has not placed any orders. 
The condition checks if the "id" column in the "Orders" table is null.

In summary, this query retrieves the names of customers who have not placed any orders, using a LEFT JOIN to include all customers and a WHERE clause to filter out those with matching orders.
