class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if(list1!=null && list2!=null){
        if(list1.val<list2.val){
            list1.next=mergeTwoLists(list1.next,list2);
            return list1;
            }
            else{
                list2.next=mergeTwoLists(list1,list2.next);
                return list2;
        }
        }
        if(list1==null)
            return list2;
        return list1;
    }
}

Logic: Explanation 
Example - Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Class Definition:
The code snippet defines a class named Solution.

Method Definition:
Inside the class, there's a method named mergeTwoLists.
This method takes two parameters of type ListNode named list1 and list2.

Recursion:
The method is implemented recursively to merge two sorted linked lists.
It merges the lists in such a way that the resulting list is also sorted.

Base Case:
The base case is when either list1 or list2 becomes null.
If list1 is null, it returns list2.
If list2 is null, it returns list1.

Comparison and Merging:
If neither list1 nor list2 is null, it compares the values of the heads of the lists.
If the value of the head of list1 is less than the value of the head of list2, it sets the next node of list1 to the result of merging the rest of list1 with list2.
If the value of the head of list2 is less than or equal to the value of the head of list1, it sets the next node of list2 to the result of merging list1 with the rest of list2.

Returning the Merged List:
Finally, it returns either list1 or list2, whichever is not null.
