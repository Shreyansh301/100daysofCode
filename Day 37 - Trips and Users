select request_at as day,
round(
    avg(
        case when status ='cancelled_by_driver' or status='cancelled_by_client' then 1 
        else 0 
        end
    )
    ,2
) as 'Cancellation rate'
from 
(
    select * from trips where client_id in 
    (
        select users_id from users where role='client' and banned='No'
    ) 
    AND 
    driver_id in 
    (
        select users_id from users where role='driver' and banned='No'
    )
) as a group by day having day between '2013-10-01' AND '2013-10-03';

LOGIC: Explanation 
Example - 

Input: 
Trips table:
+----+-----------+-----------+---------+---------------------+------------+
| id | client_id | driver_id | city_id | status              | request_at |
+----+-----------+-----------+---------+---------------------+------------+
| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |
| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |
| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |
| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |
| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |
| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |
| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |
| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |
| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |
| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |
+----+-----------+-----------+---------+---------------------+------------+
Users table:
+----------+--------+--------+
| users_id | banned | role   |
+----------+--------+--------+
| 1        | No     | client |
| 2        | Yes    | client |
| 3        | No     | client |
| 4        | No     | client |
| 10       | No     | driver |
| 11       | No     | driver |
| 12       | No     | driver |
| 13       | No     | driver |
+----------+--------+--------+
Output: 
+------------+-------------------+
| Day        | Cancellation Rate |
+------------+-------------------+
| 2013-10-01 | 0.33              |
| 2013-10-02 | 0.00              |
| 2013-10-03 | 0.50              |
+------------+-------------------+

On 2013-10-01:
  - There were 4 requests in total, 2 of which were canceled.
  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.
  - Hence there are 3 unbanned requests in total, 1 of which was canceled.
  - The Cancellation Rate is (1 / 3) = 0.33
On 2013-10-02:
  - There were 3 requests in total, 0 of which were canceled.
  - The request with Id=6 was made by a banned client, so it is ignored.
  - Hence there are 2 unbanned requests in total, 0 of which were canceled.
  - The Cancellation Rate is (0 / 2) = 0.00
On 2013-10-03:
  - There were 3 requests in total, 1 of which was canceled.
  - The request with Id=8 was made by a banned client, so it is ignored.
  - Hence there are 2 unbanned request in total, 1 of which were canceled.

-----------------------------------------------------------------------------------------------------------------------

This SQL query calculates the cancellation rate for each day between '2013-10-01' and '2013-10-03' based on the given conditions.

The innermost subquery retrieves records from the "trips" table where both the client and driver are not banned.

The middle subquery retrieves the client_ids of users with the role 'client' and not banned, as well as the driver_ids of users with the role 'driver' and not banned.

The outer query calculates the cancellation rate for each day by taking the average of 1 (for canceled trips) or 0 (for non-canceled trips) based on the conditions specified. The results are rounded to two decimal places.

The final result is grouped by the "request_at" column (aliased as "day"), and the output is filtered to include only records with days between '2013-10-01' and '2013-10-03'.
  - The Cancellation Rate is (1 / 2) = 0.50

