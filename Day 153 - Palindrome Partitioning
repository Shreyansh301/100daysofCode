class Solution {
    private void computePalindromes(String s, boolean[][] dp){
        int n = s.length();
        for (int i = 0; i < n; i++){
            dp[i][i] = true;
            if (i+1 < n) dp[i][i+1] = (s.charAt(i) == s.charAt(i+1));
        }
        for (int len = 3; len <= n; len++){
            for (int i = 0, j; i <= n - len; i++){
                j = i + len - 1;
                dp[i][j] = (s.charAt(i) == s.charAt(j) && dp[i+1][j-1]);
            }
        }
    }
    private void backtrack(int index, String s, List<String> curr, List<List<String>> result, boolean[][] dp){
        if (index >= s.length()){
            result.add(new ArrayList<>(curr));
            return;
        }
        for (int i = index; i < s.length(); i++){
            if (dp[index][i]){
                curr.add(s.substring(index, i + 1));
                backtrack(i + 1, s, curr, result, dp);
                curr.remove(curr.size() - 1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        int n = s.length();
        List<String> t = new ArrayList<>();
        List<List<String>> result = new ArrayList<>();
        boolean[][] dp = new boolean[n][n];
        computePalindromes(s, dp);
        backtrack(0, s, t, result, dp);
        return result;
    }
}

Level - Medium (131)
LOGIC: Explanation 
Example - Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
--------------------------------------------------------------------------------------------
Class Definition:
The class Solution encapsulates the methods required to solve the problem.

computePalindromes Method:
Purpose: Fills a 2D boolean array dp to indicate whether a substring s[i..j] is a palindrome.
Initialization: Marks single characters and adjacent identical characters as palindromes.
Dynamic Programming: Iteratively checks longer substrings, using the results of shorter substrings.

backtrack Method:
Purpose: Recursively builds and collects all valid palindrome partitioning combinations.
Base Case: If the current index reaches the end of the string, add the current list of substrings to the result.
Recursive Case: For each possible end index of the current substring, if the substring is a palindrome, add it to the current list and continue to partition the remaining string.

partition Method:
Purpose: Initializes necessary data structures and starts the process of finding all palindrome partitions.
Initialization: Prepares an empty list t for the current partition and result for storing all partitions. Initializes the dp array.
Palindrome Computation: Calls computePalindromes to fill the dp array.
Backtracking: Calls backtrack to find all valid partitions.

Execution:
The partition method is the entry point that sets up the problem and triggers the computation and backtracking processes to find all possible palindrome partitions of the input string.
