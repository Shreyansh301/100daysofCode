class Solution {
    public int[][] modifiedGraphEdges(int n, int[][] edges, int source, int destination, int target) {
        List<int[]>[] adjacencyList = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adjacencyList[i] = new ArrayList<>();
        }
        for (int i = 0; i < edges.length; i++) {
            int nodeA = edges[i][0], nodeB = edges[i][1];
            adjacencyList[nodeA].add(new int[]{nodeB, i});
            adjacencyList[nodeB].add(new int[]{nodeA, i}); 
        }

        int[][] distances = new int[n][2];
        Arrays.fill(distances[source], 0);
        for (int i = 0; i < n; i++) {
            if (i != source) {
                distances[i][0] = distances[i][1] = Integer.MAX_VALUE;
            }
        }

        runDijkstra(adjacencyList, edges, distances, source, 0, 0);
        int difference = target - distances[destination][0];
        if (difference < 0) return new int[][]{}; 
        runDijkstra(adjacencyList, edges, distances, source, difference, 1);
        if (distances[destination][1] < target) return new int[][]{}; 

        for (int[] edge : edges) {
            if (edge[2] == -1) edge[2] = 1; 
        }
        return edges;
    }

    private void runDijkstra(List<int[]>[] adjacencyList, int[][] edges, int[][] distances, int source, int difference, int run) {
        int n = adjacencyList.length;
        PriorityQueue<int[]> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        priorityQueue.add(new int[]{source, 0});
        distances[source][run] = 0;

        while (!priorityQueue.isEmpty()) {
            int[] current = priorityQueue.poll();
            int currentNode = current[0];
            int currentDistance = current[1];

            if (currentDistance > distances[currentNode][run]) continue;

            for (int[] neighbor : adjacencyList[currentNode]) {
                int nextNode = neighbor[0], edgeIndex = neighbor[1];
                int weight = edges[edgeIndex][2];

                if (weight == -1) weight = 1; // Initially consider -1 as 1

                if (run == 1 && edges[edgeIndex][2] == -1) {
           
                    int newWeight = difference + distances[nextNode][0] - distances[currentNode][1];
                    if (newWeight > weight) {
                        edges[edgeIndex][2] = weight = newWeight; 
                    }
                }

                if (distances[nextNode][run] > distances[currentNode][run] + weight) {
                    distances[nextNode][run] = distances[currentNode][run] + weight;
                    priorityQueue.add(new int[]{nextNode, distances[nextNode][run]});
                }
            }
        }
    }
}

/*
Level - Hard (2699)
LOGIC: Explanation
Example - Input: n = 5, edges = [[4,1,-1],[2,0,-1],[0,3,-1],[4,3,-1]], source = 0, destination = 1, target = 5
Output: [[4,1,1],[2,0,1],[0,3,3],[4,3,1]]
The graph above shows a possible modification to the edges, making the distance from 0 to 1 equal to 5.
---------------------------------------------------------------------------------------------------------
Objective: 
The code modifies the weights of edges in a graph such that the shortest path from a source node to a destination node equals a given target value. If it's impossible, it returns an empty array.

Graph Representation:
The graph is represented using an adjacency list (adjacencyList), where each node points to a list of neighboring nodes and their corresponding edge indices.

Initial Setup:
Initializes a distance matrix (distances) to store the shortest path distances for two scenarios: original and modified edges.
Fills the distances from the source node to all other nodes with 0 for the source and Integer.MAX_VALUE (infinity) for all others.

Dijkstra's Algorithm:
The runDijkstra method is used to calculate the shortest path using Dijkstra's algorithm.
First run (without modifying any edges) to find the initial shortest path from the source to the destination.
Calculates the difference between the target and the initial shortest path.
Second Run with Modified Edges:

If the difference is non-negative, it runs Dijkstra's algorithm again, considering edge modifications where needed.
Adjusts edge weights (edges[edgeIndex][2]) to meet the target distance by increasing the weight of -1 edges.

Final Edge Adjustment:
After ensuring the path meets the target, any remaining -1 edge weights are set to 1.

Return:
Returns the modified edges array. If no valid modification is possible, it returns an empty array.
 */