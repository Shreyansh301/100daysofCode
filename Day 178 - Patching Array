class Solution {
    public int minPatches(int[] nums, int n) {
        long miss = 1;
        int result = 0;
        int i = 0;

        while (miss <= n) {
            if (i < nums.length && nums[i] <= miss) {
                miss += nums[i];
                i++;
            } else {
                miss += miss;
                result++;
            }
        }

        return result;
    }
}

Level - Hard (330)
LOGIC: Explanation
Example - Input: nums = [1,3], n = 6
Output: 1
Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.
--------------------------------------------------------------------------------------------------------------
Initialize variables: miss to 1, result to 0, and i to 0.
Loop until miss exceeds n:
If current element in nums (nums[i]) is less than or equal to miss:
Add nums[i] to miss.
Increment i.
Else:
Double miss.
Increment result.
