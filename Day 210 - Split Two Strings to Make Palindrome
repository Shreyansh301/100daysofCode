class Solution {
   public static boolean checkPalindromeFormation(String a, String b) {
        return check(a, b) || check(b, a);
    }

    public static boolean check(String a, String b) {
        int i = 0;
        int j = b.length()-1;
        while (i < j) {
            if(a.charAt(i) == b.charAt(j)){
                i++;
                j--;
            }
            else{
                break;
            }
        }
        return isPalindrome(a, i, j) || isPalindrome(b, i, j);

    }

    public static boolean isPalindrome(String s, int i , int j ){
        while(i < j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
            
        }
        return true;
    }
}

/*
Level - Medium (1616)
LOGIC: Explanation
Example - Input: a = "x", b = "y"
Output: true
If either a or b are palindromes the answer is true since you can split in the following way:
aprefix = "", asuffix = "x"
bprefix = "", bsuffix = "y"
Then, aprefix + bsuffix = "" + "y" = "y", which is a palindrome.
-------------------------------------------------------------------------------------------------
Class Definition:
The class is named Solution.

Main Method:
checkPalindromeFormation(String a, String b):
This method takes two strings a and b.
It returns true if a palindrome can be formed by splitting and combining the two strings. It does this by calling the helper method check twice, swapping the order of a and b.

Helper Method check:
check(String a, String b):
This method takes two strings a and b.
It uses two pointers, i starting from the beginning of a and j starting from the end of b.
The while loop checks if the characters at i in a and j in b are the same, incrementing i and decrementing j as long as they match.
If a mismatch is found, the loop breaks.
The method then returns true if either the remaining substring in a or b is a palindrome (using the isPalindrome method).

Palindrome Check Method:
isPalindrome(String s, int i, int j):
This method checks if the substring of s from index i to j is a palindrome.
It uses a while loop to compare characters from the beginning (i) and end (j) of the substring.
If all corresponding characters match, it returns true, otherwise it returns false.
 */