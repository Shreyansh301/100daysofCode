class Solution {
    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {
      int satisfied = 0;
      //total satisfied customers
      for(int i = 0; i < customers.length; i++){
        if(grumpy[i] == 0) satisfied += customers[i];
      }

      int left = 0, bonus =0;
      //first window of unsatisfied customers turned into satisfied
      for(int i = 0; i< minutes ; i++){
        if(grumpy[i] == 1) bonus+= customers[i]; 
      }
      int curBonus = bonus;
      //get the maximum new satisfactions in "minutes" length window 
      for(int right = minutes; right < customers.length; right++){
        if(grumpy[left] == 1) curBonus -= customers[left];
        left++;
        if(grumpy[right] == 1) curBonus+= customers[right];
        bonus = Math.max(bonus,curBonus); 
      }
      return satisfied+bonus;
    }
}

Level - Medium (1052)
LOGIC: Explanation 
Example - Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3
Output: 16
The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.
-------------------------------------------------------------------------------------------
Initialize satisfied to count initially satisfied customers.
Loop through customers to add counts where grumpy[i] is 0 to satisfied.
Initialize left to 0 and bonus to calculate additional satisfied customers within the first minutes window.
Iterate through the first minutes to add counts where grumpy[i] is 1 to bonus.
Set curBonus to bonus.
Slide the window from minutes to end of customers array, adjusting curBonus by subtracting the leftmost and adding the rightmost grumpy customers' counts.
Update bonus with the maximum value of curBonus.
Return the sum of satisfied and bonus.
