class Solution {
    public int[] kthSmallestPrimeFraction(int[] arr, int k) {
        // Priority queue to store fractions with comparator to sort by fraction value
        PriorityQueue<int[]> pq = new PriorityQueue<>(
                (a, b) -> Integer.compare(arr[a[0]] * arr[b[1]], arr[a[1]] * arr[b[0]]));

        // Initialize the heap with the first possible fraction from each numerator
        for (int i = 0; i < arr.length - 1; i++) {
            pq.add(new int[] { i, arr.length - 1 });
        }

        // Extract the smallest fraction k-1 times to reach the k-th smallest
        for (int i = 1; i < k; i++) {
            int[] frac = pq.poll();
            int numeratorIndex = frac[0];
            int denominatorIndex = frac[1];

            // Push the next fraction with the same numerator and the next smaller
            // denominator
            if (denominatorIndex - 1 > numeratorIndex) {
                pq.add(new int[] { numeratorIndex, denominatorIndex - 1 });
            }
        }

        // The k-th smallest fraction's indices after popping k-1 elements
        int[] result = pq.poll();
        return new int[] { arr[result[0]], arr[result[1]] };
    }
}

Level - Medium (786)
LOGIC: Explanation 
Example - Input: arr = [1,2,3,5], k = 3
Output: [2,5]
The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.
-------------------------------------------------------------------------------------
Approach -

Heap Initialization: Start by pushing the smallest possible fraction for each numerator with the array's largest value as the denominator into the heap.
Iterative Extraction and Update: Repeatedly extract the smallest fraction from the heap and replace it with the next smallest fraction using the same numerator but a smaller denominator, until the k-th smallest fraction is reached.
Retrieve the k-th Smallest: After k-1 extractions, the top of the heap contains the k-th smallest fraction, which is then returned as the final result.

Complexity -

Time complexity:
O(NlogN)

Space complexity:
O(N)
