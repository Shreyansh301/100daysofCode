class Solution {
    public int pivotIndex(int[] nums) {
        int n=nums.length;
        int tSum=0;
        for(int i=0;i<n;i++) tSum+=nums[i];
        int prefixSum=0;
        int suffixSum=tSum;
        for(int i=0;i<n;i++){
            if(i==0){
                prefixSum=nums[i];
                suffixSum=tSum;
            } else{
                nums[i]+=nums[i-1];
                prefixSum=nums[i];
                suffixSum=tSum-nums[i-1];
            }
            if(prefixSum==suffixSum) return i;
        }
        return -1;
    }
} 

Logic: Explanation 
Example - Input: nums = [1,7,3,6,5,6]
Output: 3
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11

This Java code defines a class named Solution with a method pivotIndex. 
The purpose of the method is to find the index of the pivot element in an array nums, where the sum of elements on the left side of the pivot is equal to the sum of elements on the right side.

Input Parameter:
The method pivotIndex takes an array of integers called nums as input.

Initialization:
n is initialized to the length of the array nums.
tSum is initialized to 0. It will be used to store the total sum of all elements in the array.

Calculate Total Sum:
A loop is used to iterate through each element of the array, and tSum is updated by adding each element's value.

Initialize Prefix and Suffix Sums:
Two variables, prefixSum and suffixSum, are initialized. prefixSum represents the sum of elements on the left side of the current index, and suffixSum represents the sum of elements on the right side.

Iterate Through the Array:
Another loop is used to iterate through each index of the array.
Inside the loop, the code checks if the current index is 0. If so, it initializes prefixSum with the value of the first element and sets suffixSum to the total sum.
If the current index is not 0, it updates the array elements such that each element contains the cumulative sum up to that index.
prefixSum is updated to the cumulative sum of elements up to the current index, and suffixSum is updated to the total sum minus the cumulative sum up to the previous index.

Check for Pivot Index:
After updating the cumulative sums, the code checks if prefixSum is equal to suffixSum. If they are equal, it means the current index is the pivot index, and the method returns the index.

Return -1 if No Pivot Index Found:
If no pivot index is found in the loop, the method returns -1 to indicate that there is no such index.
