class Solution {
    public int maxProduct(int[] nums) {
        int max = Integer.MIN_VALUE,pro=1;
        for(int i=0;i<nums.length;i++)
        {
            pro = pro * nums[i];
            if(max<pro)
            {
                max=pro;
            }
            if(pro==0)
            {
                pro = 1;
            }
        }
        pro=1;
        for(int i=nums.length-1;i>=0;i--)
        {
            pro = pro * nums[i];
            if(max<pro)
            {
                max=pro;
            }
            if(pro==0)
            {
                pro=1;
            }
        }
        return max;
    }
}

/*
Level - Medium (152)
LOGIC: Explanation
Example - Input: nums = [2,3,-2,4]
Output: 6
[2,3] has the largest product 6.
------------------------------------------------
Variables Initialization:
max: Stores the maximum product encountered so far, initialized to Integer.MIN_VALUE.
pro: Used to calculate the product of elements, initialized to 1.

First Pass (Left to Right):
The loop iterates over the array from left to right.
For each element nums[i], the product pro is updated by multiplying it with nums[i].
If the current product pro exceeds max, update max with the value of pro.
If the product pro becomes zero (because of a zero in the array), reset pro to 1 to restart the product calculation from the next element.

Second Pass (Right to Left):
The second loop iterates over the array from right to left.
Similar to the first pass, the product pro is updated with nums[i], and max is updated if pro exceeds max.
Again, if pro becomes zero, reset pro to 1.

Reason for Two Passes:
Two passes are done because the maximum product subarray can appear in both the left-to-right and right-to-left directions (e.g., when there are negative numbers in the array).

Return Value:
After both passes, the function returns max, which contains the maximum product found in the subarray.
 */