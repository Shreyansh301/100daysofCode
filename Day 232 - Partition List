/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode curr, prev, insertionNode = null, preHead = new ListNode(-1, head);
            
        for (curr = head, prev = preHead; curr != null; prev = curr, curr = curr.next) {
      
            // initialize the insertion node with the first node greater than or equals to x
            if (curr.val >= x && insertionNode == null) {
                insertionNode = prev;
                continue;
            }

             if (curr.val < x) {
                // no node greater than or equals to X was found
                // so we don't need to do anything
                if (insertionNode == null) {
                    continue;
                }

                // move current node to be after insertion node
                prev.next = curr.next;
                curr.next = insertionNode.next;
                insertionNode.next = curr;

                // make current node the new insertion node
                insertionNode = curr;
            }
        }

        return preHead.next;
        
    }
}

/*
Level - Medium (86)
LOGIC: Explanation
Example - Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
---------------------------------------------------------------
Class Definitions:
The ListNode class defines a node in a singly-linked list, where each node contains an integer value (val) and a reference to the next node (next).

partition Method:
The partition method is used to rearrange the nodes in a linked list such that all nodes with values less than x come before nodes with values greater than or equal to x.

Initialization:
A preHead dummy node with value -1 is created and its next points to the head of the list.
Pointers curr and prev are used to traverse the linked list.
insertionNode is initialized to null and will be used to track the position in the list where nodes with values less than x should be inserted.

Traversal:
The loop iterates through each node in the linked list using the curr pointer.
If curr.val >= x and insertionNode is null:
insertionNode is set to prev, marking the first position where nodes with values greater than or equal to x are found.

If curr.val < x:
The current node needs to be moved before the insertionNode.
The node is removed from its current position and inserted immediately after the insertionNode.
insertionNode is updated to the newly inserted node.

Return:
Finally, the method returns preHead.next, which points to the head of the modified list.
 */