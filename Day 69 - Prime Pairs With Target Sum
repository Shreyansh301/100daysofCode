class Solution {
    public List<List<Integer>> findPrimePairs(int n) {
            List<List<Integer>> ans=new ArrayList<>();
            boolean[]primes=sieveOfEratosthenes(n);
            int[]vis=new int[n+1];
        for(int i=1;i<=n;i++)
        {
                if((n-i)<=n && (n-i)>0 && primes[i] && primes[n-i] && vis[i]!=1 && vis[n-i]!=1)
                {
                        ans.add(new ArrayList<>(Arrays.asList(i,n-i)));
                        vis[i]=1;
                        vis[n-i]=1;
                }
        }
            Collections.sort(ans, (a, b) -> Integer.compare(a.get(0),b.get(0)));
            return ans;
            
        }

    public static boolean[] sieveOfEratosthenes(int n) 
     {
         boolean[] primes = new boolean[n + 1];
         Arrays.fill(primes, true);
         primes[0] = primes[1] = false;

        for (int p = 2;p <= n; p++) {
          if (primes[p] && (long)p*p<=n) {
            for (int  i = p * p; i <= n; i += p) {
                 primes[i] = false;
                       }
                 }
           }

    return primes;
     }
}

LOGIC: Explanation 
Example - Input: n = 10
Output: [[3,7],[5,5]]
In this example, there are two prime pairs that satisfy the criteria. 
These pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.
---------------------------------------------------------------------------------------------------------------------
Class Declaration:
The code defines a class named Solution.

findPrimePairs Method:
Signature: public List<List<Integer>> findPrimePairs(int n)
Parameters: n is an integer representing the maximum value for which prime pairs need to be found.
Returns: A list of lists containing pairs of prime numbers that sum up to n.

Initialization:
List<List<Integer>> ans = new ArrayList<>();: Initializes a list to store the prime pairs.
boolean[] primes = sieveOfEratosthenes(n);: Calls the sieveOfEratosthenes method to generate a boolean array indicating prime numbers up to n.
int[] vis = new int[n + 1];: Initializes an array to keep track of visited indices.

Finding Prime Pairs:
Iterates from i=1 to n.
Checks if (n-i) is within bounds and if both i and (n-i) are prime numbers.
Checks if i and (n-i) are not visited.
If conditions are met, adds a new pair (i, n-i) to the result list and marks i and (n-i) as visited.

Sorting:
Sorts the result list based on the first element of each pair in ascending order.

Return:
Returns the sorted list of prime pairs.

sieveOfEratosthenes Method:
Signature: public static boolean[] sieveOfEratosthenes(int n)
Parameters: n is an integer representing the range for which primes need to be identified.
Returns: A boolean array where primes[i] is true if i is a prime number and false otherwise.

Sieve of Eratosthenes Algorithm:
Initializes a boolean array primes of size n + 1 and sets all values to true.
Marks primes[0] and primes[1] as false since 0 and 1 are not prime.
Iterates from p=2 to n and updates the array to mark multiples of p as non-prime.

Returns the boolean array indicating prime numbers.
