class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length, pass[] = new int[n], buy=Integer.MAX_VALUE, sell=0, prof=0, i;
        // Pass 1: Forward
        for(i=0; i<n; i++) {
            if(buy>prices[i]) buy=sell=prices[i];
            sell=Math.max(sell, prices[i]);
            pass[i]=prof=Math.max(prof, sell-buy);
        }

        // Pass 2: Reversed
        int res=pass[n-1];
        for(i=n-1, sell=prof=0, buy=Integer.MAX_VALUE; i>0; --i) {
            if(sell<prices[i]) sell=buy=prices[i];
            buy=Math.min(buy, prices[i]);
            res=Math.max(res, pass[i-1]+sell-buy);
        }
        return res;
    }
}

/*
Level - Hard (123)
LOGIC: Explanation
Example - Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
---------------------------------------------------------------------------------
Class and Method Definition:
A class named Solution is defined.
A method maxProfit is defined that takes an integer array prices and returns an integer.

Initialization:
n: Length of the prices array.
pass: An array of length n to store maximum profit at each index during the first pass.
buy: A variable to track the minimum price encountered, initialized to Integer.MAX_VALUE.
sell: A variable to track the maximum price encountered after buy, initialized to 0.
prof: A variable to store the maximum profit for a single transaction, initialized to 0.
i: Loop counter.

First Pass (Forward):
Loop through the prices array from the beginning.
Update buy with the minimum price encountered so far.
Update sell with the maximum price after the buy.
Calculate the maximum profit for a single transaction up to the current day and store it in prof.
Store the prof value in the pass array at the current index.

Second Pass (Reversed):
Initialize res with the maximum profit from the first pass (last element of pass array).
Reset sell, prof, and buy for the second pass.
Loop through the prices array in reverse, starting from the second last element to the first.
Update sell with the maximum price encountered so far (in reverse).
Update buy with the minimum price after sell.
Calculate the potential maximum profit by combining the profit of two non-overlapping transactions and update res accordingly.

Return Statement:
The method returns res, which holds the maximum profit from at most two transactions.
 */